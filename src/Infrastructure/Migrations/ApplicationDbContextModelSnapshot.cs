// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Geofence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AlertOnEnter")
                        .HasColumnType("boolean");

                    b.Property<bool>("AlertOnExit")
                        .HasColumnType("boolean");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("Radius")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.ToTable("Geofences");
                });

            modelBuilder.Entity("Domain.Models.SensorData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("Altitude")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision");

                    b.Property<double?>("AmbientTemperature")
                        .HasPrecision(8, 2)
                        .HasColumnType("double precision");

                    b.Property<double>("EngineTemperature")
                        .HasPrecision(8, 2)
                        .HasColumnType("double precision");

                    b.Property<double?>("FuelConsumption")
                        .HasPrecision(10, 4)
                        .HasColumnType("double precision");

                    b.Property<double>("FuelLevel")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision");

                    b.Property<double>("Latitude")
                        .HasPrecision(18, 15)
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasPrecision(18, 15)
                        .HasColumnType("double precision");

                    b.Property<double?>("Speed")
                        .HasPrecision(8, 2)
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Timestamp")
                        .IsDescending();

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehicleId", "Timestamp")
                        .IsDescending(false, true);

                    b.HasIndex("VehicleId", "FuelLevel", "Timestamp");

                    b.ToTable("SensorData");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("Creado_en")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Direccion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id_perfil")
                        .HasColumnType("integer");

                    b.Property<string>("Identificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nombre_completo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Nombre_perfil")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TelefonoCelular")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TelefonoFijo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TipoIdentificacion")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Correo")
                        .IsUnique();

                    b.HasIndex("Identificacion")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AverageConsumption")
                        .HasPrecision(10, 4)
                        .HasColumnType("double precision");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FleetId")
                        .HasColumnType("uuid");

                    b.Property<double>("FuelCapacity")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("LastMaintenance")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("FleetId");

                    b.HasIndex("LicensePlate")
                        .IsUnique();

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Domain.Models.Geofence", b =>
                {
                    b.OwnsOne("Domain.Models.GeofenceCenter", "Center", b1 =>
                        {
                            b1.Property<Guid>("GeofenceId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Latitude")
                                .HasPrecision(18, 15)
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasPrecision(18, 15)
                                .HasColumnType("double precision");

                            b1.HasKey("GeofenceId");

                            b1.ToTable("Geofences");

                            b1.WithOwner()
                                .HasForeignKey("GeofenceId");
                        });

                    b.Navigation("Center");
                });

            modelBuilder.Entity("Domain.Models.SensorData", b =>
                {
                    b.HasOne("Domain.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });
#pragma warning restore 612, 618
        }
    }
}
